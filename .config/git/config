[alias]
    dg      = log --graph --decorate
    dog     = log --graph --decorate --oneline
    adg     = log --graph --decorate           --all
    adog    = log --graph --decorate --oneline --all
    reftree = log --graph --pretty=format:'%d' --all --simplify-by-decoration
    adogs   = "!git reftree"

    edit-conf = "!$EDITOR ~/.config/git/config"
    alias = "!git config -l | grep alias | cut -c 7-" # List all aliases
    branch-name = "!git rev-parse --abbrev-ref HEAD" # May be used in other aliases
    # branch-name = branch --show-current # Since Git 2.22
    publish = "!git push -u origin $(git branch-name)" # When you started new work on a private branch and want to publish it as a new public branch of the same name
    unpublish = "!git push origin -d $(git branch-name)" # Delete the current branch on origin
    delete-merged = "!git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d" # Delete all local branches that were merged into master

    precommit = diff --cached --diff-algorithm=minimal -w # I run this before every commit to make sure I don’t make mistakes while commiting.
    conflicts = diff --name-only --diff-filter=U # shows list of files that have a merge conflict
    del-orig = "!find . -name '*.orig' -delete" # delete all .orig files which were created when using mergetool
    loc-today = diff --shortstat "@{0 day ago}" # See how many lines of code you have written today
    delete-deleted = remote update --prune # --dry-run # Remove local branches that have been deleted from your remote
    # Also: `git whatchanged —-since=‘2 weeks ago’`
    new-worktree = git worktree add ../worktree2

    minimal-clone = git clone --depth 1 # Create a shallow clone with history truncated to 1 commits
    search-log = log -S # Search the commit history for a word and display matching commits.
    file-log = log -p
    dirfftool = difftool --dir-diff
    wdiff = diff --word-diff
    untrack = rm --cached
    untrack-dir = rm --cached -r
    uncommit = reset --mixed HEAD~
    discard = checkout --
    branches = branch -vva
    rollback = reset --hard
    set = reset --hard
    recommit = commit --amend
    unstage = reset HEAD
    clean-fetch = fetch --prune # remove any remote-tracking references that no longer exist on the remote

    log1 = log --abbrev-commit --all --graph --color --date=short --pretty=format:'%C(bold yellow)%h%Creset%C(bold red)%d%Creset %s%C(dim white) %an %C(bold green)(%ad)%Creset'
    log2 = log --abbrev-commit --all --graph --color --date=iso --pretty=format:'%C(yellow)%h %C(bold red)%D%n''%C(white)%s%n''%C(dim white)%an (%ad)%n'' '
    log3 = log --abbrev-commit --all --graph --color --date=local --pretty=format:'╴%C(yellow)%h %C(bold red)%D%n'' %C(white)%s%n'' %C(dim white)%an (%ad)'
    # Unicode symbols for drawing https://unicode-table.com/en/search/?q=drawing
    lg = "!git log1"
    lgs = "!git lg --simplify-by-decoration"

    a = add
    aa = add --all
    apa = add --patch
    au = add --update
    av = add --verbose
    b = branch
    ba = branch -a
    bd = branch -d
    bD = branch -D
    bl = blame -b -w
    bnm = branch --no-merged
    br = branch --remote
    bs = bisect
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect start
    c = commit -v
    #! c = commit -v --amend
    #! cn = commit -v --no-edit --amend
    ca = commit -v -a
    #! ca = commit -v -a --amend
    #! can = commit -v -a --no-edit --amend
    #! cans = commit -v -a -s --no-edit --amend
    cam = commit -a -m
    cm = commit -m
    co = checkout
    cob = checkout -b
    com = checkout master
    cod = checkout develop
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    cs = commit -S
    d = diff
    dca = diff --cached
    dcw = diff --cached --word-diff
    ds = diff --staged
    dt = diff-tree --no-commit-id --name-only -r
    dw = diff --word-diff
    f = fetch
    fa = fetch --all --prune
    fo = fetch origin
    m = merge
    mom = merge origin/master
    mt = mergetool --no-prompt
    mtvim = mergetool --no-prompt --tool=vimdiff
    mum = merge upstream/master
    ma = merge --abort
    p = push
    pd = push --dry-run
    pf = push --force-with-lease
    #! pf = push --force
    ra = remote add
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbd = rebase develop
    rbi = rebase -i
    rbm = rebase master
    rbs = rebase --skip
    rh = reset
    rhh = reset --hard
    ru = reset --
    rup = remote update
    rv = remote -v
    sb = status -sb
    ss = status -s
    st = status
    up = pull --rebase
    upv = pull --rebase -v
    upa = pull --rebase --autostash
    upav = pull --rebase --autostash -v
    lum = pull upstream master
[core]
    editor = vim

    pager = "less --tabs=4 -iXFR"
    # -i - ignore case when searching (but respect case if search term contains uppercase letters)
    # -X - do not clear screen on exit
    # -F - exit if text is less then one screen long
    # -R - was on by default on my system, something related to colors
[status]
    showStash = true # git-status(1) will display the number of entries currently stashed away
[fetch]
    prune = true # After fetching, remove any remote-tracking branches which no longer exist on the remote
[merge]
    # ff = false # forbid fast-forward merges, because merge commits is historic information that doesn't hurt you and might be useful to somebody
[rebase]
    autoSquah = true # enable --autosquash option by default
    autoStash = true # automatically create a temporary stash entry before rebasing
[push]
    default = current # If you forget to include the name of the branch, with this option, git will try to push to the branch with the same name and will create it if it doesn't exist
[pull]
    ff = only # Do not allow merging the fetched branch unless it can be fast-forwarded
    # rebase = interactive # rebase -i branches on top of the fetched branch
[color]
    ui = auto # enabled by default since 1.8.6 - enables colored outputs for all commands if output goes to a terminal
[color "status"]
    # added = green bold
    # changed = red bold
    # untracked = cyan bold
[diff]
    colorMoved = default # Colors moved code differently
    algorithm = minimal # This algorithm spends extra time to find the minimum diff
    tool = meld
[difftool]
    prompt = false
[difftool "meld"]
    # Required because otherwise git falls back to the command configured under mergetool
    cmd = meld "$LOCAL" "$REMOTE"
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
    keepBackup = false
    tool = meld
[mergetool "meld"]
    # Opens two tabs in meld. One compares $LOCAL and $REMOTE with $MERGED and the other compares them to $BASE
    # $MERGED = the merged version (containing the conflicts)
    # $BASE = the version of the file at the commit where the two branches were separated
    # $REMOTE = the branch being merged into $LOCAL
    # $LOCAL = the branch into which $REMOTE is merged
    cmd = meld --diff "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED" --diff "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[mergetool "vscode"]
    cmd = code --wait $MERGED
